// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl-openssl-3.0.x", "darwin-arm64", "native"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CarbonCredit {
  id String @id

  number        String
  vintage       String             @db.VarChar(4)
  type          CarbonCreditType
  origin        CarbonCreditOrigin
  purchasePrice BigInt?            @map("purchase_price")
  isRetired     Boolean            @default(false) @map("is_retired")
  isLocked      Boolean            @default(false) @map("is_locked")
  isPurchased   Boolean            @default(false) @map("is_purchased")

  auditStatus CarbonCreditAuditStatus @default(value: PROJECTED) @map("audit_status")

  project      Project     @relation(fields: [projectId], references: [id])
  projectId    String      @map("project_id")
  Allocation   Allocation? @relation(fields: [allocationId], references: [id])
  allocationId String?

  @@map("carbon_credits")
}

model ProjectionSnapshot {
  id String @id

  vintage               String @db.VarChar(4)
  emissions             BigInt
  target                BigInt
  effectiveCompensation BigInt @map("effective_compensation")
  exAnteCount           BigInt @map("ex_ante_count")
  exPostCount           BigInt @map("ex_post_count")
  confirmedCount        BigInt @map("confirmed_count")
  averagePurchasedPrice BigInt @map("average_purchased_price")
  totalPurchasedPrice   BigInt @map("total_purchased_price")
  averageIssuedPrice    BigInt @map("average_issued_price")
  totalIssuedPrice      BigInt @map("total_issued_price")
  granTotalAmount       BigInt @map("gran_total_amount")
  emissionDebtEstimated BigInt @map("emission_debt_estimated")

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("company_id")

  @@map("projection_snapshot")
}

model HistoricalProjectionSnapshot {
  id String @id

  vintage               String   @db.VarChar(4)
  emissions             BigInt
  target                BigInt
  effectiveCompensation BigInt   @map("effective_compensation")
  exAnteCount           BigInt   @map("ex_ante_count")
  exPostCount           BigInt   @map("ex_post_count")
  confirmedCount        BigInt   @map("confirmed_count")
  averagePurchasedPrice BigInt   @map("average_purchased_price")
  totalPurchasedPrice   BigInt   @map("total_purchased_price")
  averageIssuedPrice    BigInt   @map("average_issued_price")
  totalIssuedPrice      BigInt   @map("total_issued_price")
  granTotalAmount       BigInt   @map("gran_total_amount")
  emissionDebtEstimated BigInt   @map("emission_debt_estimated")
  Company               Company? @relation(fields: [companyId], references: [id])
  companyId             String?

  @@map("historical_projection_snapshots")
}

model Project {
  id String @id

  name             String
  description      String
  localization     String
  startDate        String             @map("start_date") @db.VarChar(4)
  endDate          String             @map("end_date") @db.VarChar(4)
  area             Int                @map("area")
  type             CarbonCreditType
  origin           CarbonCreditOrigin
  fundingAmount    BigInt             @map("funding_amount")
  color            ProjectColor
  protectedSpecies Int                @map("protected_species")
  protectedForest  Int                @map("protected_forest")
  allocation       Int

  carbonCredits CarbonCredit[]
  curvePoints   CurvePoint[]
  certifier     Certifier?     @relation(fields: [certifierId], references: [id])
  certifierId   String?        @map("certifier_id")
  developper    Developper?    @relation(fields: [developperId], references: [id])
  developperId  String?        @map("developper_id")
  country       Country        @relation(fields: [countryId], references: [id])
  countryId     String         @map("country_id")
  company       Company        @relation(fields: [companyId], references: [id])
  companyId     String         @map("company_id")
  ProjectsSdgs  ProjectsSdgs[]

  @@map("projects")
}

model CurvePoint {
  id         String   @id
  time       DateTime @db.Timestamptz
  absorption Float

  project   Project @relation(fields: [projectId], references: id)
  projectId String  @map("project_id")

  @@map("curve_point")
}

model Company {
  id String @id

  name String
  slug String @unique

  configuration                CompanyConfiguration[]
  emissions                    CompanyEmission[]
  projects                     Project[]
  projectionSnapshots          ProjectionSnapshot[]
  HistoricalProjectionSnapshot HistoricalProjectionSnapshot[]
  businessUnits                BusinessUnit[]

  @@map("company")
}

model CompanyEmission {
  id String @id

  year     String @db.VarChar(4)
  emission Int
  target   Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("company_id")

  @@map("company_emission")
}

model CompanyConfiguration {
  id String @id

  key   String
  value String

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("company_id")

  @@map("company_configuration")
}

model BusinessUnit {
  id              String @id
  name            String
  description     String
  defaultEmission Int    @map("default_emission")
  defaultTarget   Int    @map("default_target")
  debt            Int
  metadata        Json

  forecastEmissions ForecastEmission[]
  forecastTargets   ForecastTarget[]
  allocations       Allocation[]
  orders            Order[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("company_id")

  @@map("business_unit")
}

model ForecastEmission {
  id       String @id
  quantity Int
  year     Int

  businessUnitId String       @map("business_unit_id")
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])

  @@unique([year, businessUnitId])
  @@map("forecast_emission")
}

model ForecastTarget {
  id       String @id
  quantity Int
  year     Int

  businessUnitId String       @map("business_unit_id")
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])

  @@unique([year, businessUnitId])
  @@map("forecast_target")
}

model Order {
  id String @id

  year     Int
  quantity Int
  deficit  Int?
  status   OrderStatus @default(value: PENDING) @map("order_status")

  businessUnitId String       @map("business_unit_id")
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])

  @@unique([year, businessUnitId])
  @@map("order")
}

model Allocation {
  id String @id

  quantity      Int
  carbonCredits CarbonCredit[]
  status        AllocationStatus

  businessUnitId String       @map("business_unit_id")
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
}

model Certifier {
  id   String @id
  name String
  slug String @unique

  project Project[]

  @@map("certifier")
}

model Developper {
  id   String @id
  name String
  slug String @unique

  projects Project[]

  @@map("developper")
}

model Country {
  id   String @id
  name String
  code String
  data Json

  projects Project[]

  @@map("country")
}

model Sdg {
  id           String         @id
  number       Int
  name         String
  ProjectsSdgs ProjectsSdgs[]

  @@map("sdg")
}

model ProjectsSdgs {
  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @map("project_id")
  sdg       Sdg     @relation(fields: [sdgId], references: [id])
  sdgId     String  @map("sdg_id")

  @@id([projectId, sdgId])
  @@map("projects_sdgs")
}

enum CarbonCreditOrigin {
  FORWARD_FINANCE
  DIRECT_PURCHASE
}

enum CarbonCreditType {
  RESTORATION
  CONCERVATION
}

enum ProjectColor {
  BLUE
  ORANGE
  GREEN
}

enum CarbonCreditAuditStatus {
  PROJECTED
  CONFIRMED
  AUDITED
}

enum OrderStatus {
  PENDING
  ONGOING
  FULLFILLED
}

enum AllocationStatus {
  INITIAL
  RE_ALLOCATED
}

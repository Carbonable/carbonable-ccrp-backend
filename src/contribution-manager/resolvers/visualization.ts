import * as _ from 'lodash';
import { Args, Resolver, Query } from '@nestjs/graphql';
import {
  VISUALIZATION_REPOSITORY,
  VisualizationRepositoryInterface,
} from '../../domain/allocation';
import { Inject } from '@nestjs/common';
import {
  VisualizationStrategyKeyInput,
  annualPlanningKey,
  cumulativePlanningKey,
  financialAnalysisKey,
  netZeroKey,
} from '../../domain/allocation/visualization/utils';
import { VisualizationViewType } from '../../schemas/graphql.autogenerated';
import Utils from '../../utils';

@Resolver('Visualization')
export class VisualizationResolver {
  constructor(
    @Inject(VISUALIZATION_REPOSITORY)
    private readonly repository: VisualizationRepositoryInterface,
  ) {}

  @Query()
  async netZeroPlanning(@Args('view') view: any) {
    return await getVisualizationView(netZeroKey)(
      this.repository,
      view as VisualizationViewType,
    );
  }

  @Query()
  async annual(@Args('view') view: any, @Args('pagination') pagination: any) {
    const data = await getVisualizationView(annualPlanningKey)(
      this.repository,
      view as VisualizationViewType,
    );

    return Utils.paginate(data, pagination);
  }

  @Query()
  async cumulative(
    @Args('view') view: any,
    @Args('pagination') pagination: any,
  ) {
    const data = await getVisualizationView(cumulativePlanningKey)(
      this.repository,
      view as VisualizationViewType,
    );
    return Utils.paginate(data, pagination);
  }

  @Query()
  async financialAnalysis(
    @Args('view') view: any,
    @Args('pagination') pagination: any,
  ) {
    const data = await getVisualizationView(financialAnalysisKey)(
      this.repository,
      view as VisualizationViewType,
    );
    return Utils.paginate(data, pagination);
  }
}

function getVisualizationView(
  viewKey: (input: VisualizationStrategyKeyInput) => string,
) {
  return async function (
    repository: VisualizationRepositoryInterface,
    view: VisualizationViewType,
  ) {
    // converting snakecase to camelCase
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const camelized = _.mapKeys(view, (_v: string, k: string) =>
      _.camelCase(k),
    );
    const res = await repository.get(
      viewKey(camelized as VisualizationStrategyKeyInput),
    );
    if (!res) {
      return [];
    }

    return _.values(
      _.mapValues(JSON.parse(res), (item) => {
        return _.mapKeys(item, (_v: any, k: string) => _.snakeCase(k));
      }),
    );
  };
}

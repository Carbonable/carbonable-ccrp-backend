import * as _ from 'lodash';
import { Args, Resolver, Query } from '@nestjs/graphql';
import {
  VISUALIZATION_REPOSITORY,
  VisualizationRepositoryInterface,
} from '../../domain/allocation';
import { Inject } from '@nestjs/common';
import {
  VisualizationStrategyKeyInput,
  annualPlanningKey,
  cumulativePlanningKey,
  financialAnalysisKey,
  netZeroKey,
} from '../../domain/allocation/visualization/utils';
import { VisualizationViewType } from '../../schemas/graphql.autogenerated';

@Resolver('Visualization')
export class VisualizationResolver {
  constructor(
    @Inject(VISUALIZATION_REPOSITORY)
    private readonly repository: VisualizationRepositoryInterface,
  ) {}

  @Query('netZeroPlanning')
  async netZeroPlanning(@Args('view') view: VisualizationViewType) {
    return await getVisualizationView(netZeroKey)(this.repository, view);
  }

  @Query('annual')
  async annual(@Args('view') view: VisualizationViewType) {
    return await getVisualizationView(annualPlanningKey)(this.repository, view);
  }

  @Query('cumulative')
  async cumulative(@Args('view') view: VisualizationViewType) {
    return await getVisualizationView(cumulativePlanningKey)(
      this.repository,
      view,
    );
  }

  @Query('financialAnalysis')
  async financialAnalysis(@Args('view') view: VisualizationViewType) {
    return await getVisualizationView(financialAnalysisKey)(
      this.repository,
      view,
    );
  }
}

function getVisualizationView(
  viewKey: (input: VisualizationStrategyKeyInput) => string,
) {
  return async function (
    repository: VisualizationRepositoryInterface,
    view: VisualizationViewType,
  ) {
    // converting snakecase to camelCase
    view = _.mapKeys(view, (_v: string, k: string) => _.camelCase(k));
    const res = await repository.get(
      viewKey(view as VisualizationStrategyKeyInput),
    );
    if (!res) {
      return [];
    }

    return JSON.parse(res);
  };
}
